
data Red: int -o coloredint
   | White: int -o coloredint
   | Blue: int -o coloredint ;;

data Nil: list
   | Cons: coloredint -o list -o list ;;

data Tuple: (list -o list) -o (list -o list) -o (list -o list) -o tuple ;;

# The Dutch National Flag problem (desc desc)
# takes the *end* of a list, and the bucketed *beginnings* of that list
# and returns the bucketed entire list (tail recursive function)
let dutch' = thunk rec loop : tuple -> list -> F list is 
  fun tup : tuple -> 
  fun xs : list -> 
    match tup with 
      | Tuple reds whites blues -> 
         (match xs with
            | Nil -> return (reds (whites (blues Nil)))
            | Cons y ys -> 
               (match y with 
                  | Red i -> 
                      force loop 
                        (Tuple ([hole: list] reds (Cons y hole)) whites blues)
                        ys
                  | White i ->  
                      force loop 
                        (Tuple reds ([hole: list] whites (Cons y hole)) blues)
                        ys
                  | Blue i -> 
                      force loop 
                        (Tuple reds whites ([hole: list] blues (Cons y hole)))
                        ys)) ;; 

let dutch = thunk fun xs : list -> 
  force dutch' (Tuple ([x: list] x) ([x: list] x) ([x: list] x)) xs

force dutch 
  (Cons (White 4) 
   (Cons (Blue 6)
    (Cons (Red 1)  
     (Cons (White 5) 
      (Cons (Blue 7) (Cons (Red 2) (Cons (Red 3) (Cons (Blue 8) Nil)))))))) ;;

